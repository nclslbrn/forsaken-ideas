(function (p5) {
  'use strict';

  var canvas;
  var sketch = function sketch(p5) {
    p5.setup = function () {
      canvas = p5.createCanvas(window.innerWidth - 80, window.innerHeight - 160);
      p5.background(20);
      p5.fill('#fce414');
      p5.noLoop();
    };
    p5.draw = function () {
      var cells = p5.round(p5.random(64, 96));
      var regularSize = p5.width / cells;
      var cellSizeVariation = regularSize / cells * 12;
      var xIncrement = cellSizeVariation;
      var yIncrement = cellSizeVariation;
      var cellWidth = regularSize + xIncrement;
      var cellHeight = regularSize / 1.4;
      var initStep = cellSizeVariation / cells * regularSize;
      var xIncrementFactor = 1.5;
      var yIncrementFactor = 1.5;
      var xIncrementStep = initStep * xIncrementFactor;
      var yIncrementStep = initStep * yIncrementFactor;
      var xPos = 0;
      var yPos = 0;
      p5.background(20);
      while (xPos < p5.width) {
        if (yPos < p5.height) {
          if (yIncrement > cellSizeVariation) { yIncrementStep--; }
          if (yIncrement < 0) { yIncrementStep++; }
          yIncrement += yIncrementStep;
          cellHeight = regularSize + yIncrement;
          p5.ellipse(xPos + cellWidth / 2, yPos + cellHeight / 2, Math.min(cellWidth, cellHeight) * 0.8);
          yPos = yPos + cellHeight;
        } else {
          yIncrementStep = initStep * yIncrementFactor;
          yIncrement = -cellSizeVariation;
          yPos = 0;
          if (xIncrement > cellSizeVariation) { xIncrementStep--; }
          if (xIncrement < 0) { xIncrementStep++; }
          xIncrement += xIncrementStep;
          cellWidth = regularSize + xIncrement;
          xPos = xPos + cellWidth;
        }
      }
    };
    p5.windowResized = function () {
      p5.resizeCanvas(window.innerWidth - 80, window.innerHeight - 160);
      p5.redraw();
    };
    p5.keyPressed = function () {
      p5.save(canvas, 'Yakoi-Kusama', 'jpg');
    };
    sketch.init_sketch = function () {
      return p5.redraw();
    };
  };

  var infobox = function infobox() {
    var infoBoxElement = document.getElementById('infobox');
    if (infoBoxElement != null) {
      infoBoxElement.classList.toggle('active');
    }
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }

  var chars = [].concat(_toConsumableArray('0123456789'), _toConsumableArray(':/*|&#@$!<>'), _toConsumableArray('{}[]+-_^~%?;()'));
  var duration = 45;
  var GlitchText = /*#__PURE__*/function () {
    function GlitchText(property) {
      var _this = this;
      _classCallCheck(this, GlitchText);
      this.element = property.element;
      this.trueText = property.element.innerText || property.element.innerHTML;
      this.numChar = this.trueText.length;
      this.effect = property.effect;
      this.curChar = 0;
      this.biteChar = '';
      for (var i = 0; i < this.numChar; i++) {
        var charAtI = this.trueText.substr(i, 1);
        if (charAtI && charAtI === ' ') {
          this.biteChar += ' ';
        } else {
          this.biteChar += chars[Math.floor(Math.random() * chars.length)];
        }
      }
      this.element.innerHTML = this.effect == 'replace' ? this.biteChar : '';
      for (var x = 0; x <= this.numChar; x++) {
        setTimeout(function () {
          if (_this.effect === 'add') {
            _this.addChar();
          } else if (_this.effect === 'replace') {
            _this.replaceChar();
          }
        }, x * duration);
      }
    }
    _createClass(GlitchText, [{
      key: "replaceChar",
      value: function replaceChar() {
        var middleStringPart;
        if (this.curChar + 1 < this.numChar) {
          middleStringPart = chars[Math.floor(Math.random() * chars.length)];
        } else {
          middleStringPart = '';
        }
        var firstStringPart = this.trueText.substr(0, this.curChar);
        var lastStringPart = this.biteChar.substr(this.curChar, this.numChar);
        this.element.innerHTML = firstStringPart + middleStringPart + lastStringPart;
        this.element.dataset.text = firstStringPart + middleStringPart + lastStringPart;
        this.curChar++;
      }
    }, {
      key: "addChar",
      value: function addChar() {
        var middleStringPart;
        if (this.curChar + 1 < this.numChar) {
          middleStringPart = chars[Math.floor(Math.random() * chars.length)];
        } else {
          middleStringPart = '';
        }
        var firstStringPart = this.trueText.substr(0, this.curChar);
        this.element.innerHTML = firstStringPart + middleStringPart;
        this.element.dataset.text = firstStringPart + middleStringPart;
        this.curChar++;
      }
    }]);
    return GlitchText;
  }();

  var handleAction = function handleAction() {
    window['openOffFrame'] = function () {
      document.body.classList.toggle('openedOffWindow');
      var titleElem = document.getElementById('projectTitle');
      new GlitchText({
        element: titleElem,
        effect: 'add'
      });
    };
    var buttons = document.querySelectorAll('[data-action]');
    if (typeof buttons != 'undefined') {
      var _loop = function _loop() {
        var action = buttons[b].getAttribute('data-action');
        buttons[b].addEventListener('click', function () {
          var calledFunction = window[action];
          if (typeof calledFunction !== 'function') {
            console.log(action, ' is not defined');
          } else {
            calledFunction();
          }
        }, false);
      };
      for (var b = 0; b < buttons.length; b++) {
        _loop();
      }
    }
  };

  var windowFrame = document.getElementById('windowFrame');
  var loader = document.getElementById('loading');
  new p5(sketch, windowFrame);
  windowFrame.removeChild(loader);
  window.init_sketch = sketch.init_sketch;
  window.infobox = infobox;
  handleAction();

})(p5);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
